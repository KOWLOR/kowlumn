/*--
  To create a grid pattern define it in the $cols array.
  Then, call the .base--# class to use it, not only on .container, 
  but also in a nested .row !
  Obviously, you can't nest a .container in another one or within a .row, but you create a .row in a .kl-*.
  That's all !
--*/
@import 'variables';
@import 'mixin';

*{
  padding:0;
  margin:0;
}
*, *:before, *:after{
  box-sizing:border-box;
}

$body-color:#23232C;

html{
  font-size:100%;
  -webkit-text-size-adjust: none;
}
body{
  font:normal .9em/1.45em "Source Sans Pro", Arial;
  @include rem(padding-top, 20px);
  color:$body-color;
  -webkit-font-smoothing: subpixel-antialiased;
}

.container{
  @include clearfix();
  margin: 0 auto;
  width: $container-width;
}

@each $val in $cols{
  @for $i from 1 through $val {
    .base--#{$val} .kl-#{$i}, .row.base--#{$val} .kl-#{$i} {
      width: ((100 / $val) * $i) * 1%;
    }
  }
}

.row{
  @include clearfix();
  //@include rem(margin-bottom, 10px);
  .row{
    @include rem(margin-left, -$gutter / 2);
    @include rem(margin-right, -$gutter / 2);
  }
}

.row + .row, .row .row{
  @include rem(margin-top, 10px);
}

[class^="kl-"]{
  background-clip: content-box;
  float:left;
  @include rem(min-height, 1px);
  @include rem(padding-left, $gutter / 2);
  @include rem(padding-right, $gutter / 2);  
}





/* -- Media Queries -- */

// Desktop
@media (max-width: $screen-sm-desktop-max) {
  .container{width:100%}
  //body{background: salmon}
}
@media (min-width: $screen-tablet-max) and (max-width: $screen-sm-desktop-max) {
  //helper (when a .kl-* goes under another due to the float)
  .clear-left-smd{
    clear:left;
  }
}



//--* Tablet *--//
@media (max-width: $screen-tablet-max) {
  //body{background:aquamarine}

  .mg-top-tb{ 
    @include rem(margin-top, $gutter)
  }
  @each $val in $cols{
    // Set all to 100% if not overrided from a class from the loop below
    .base--#{$val} [class^="kl-"], .row.base--#{$val} [class^="kl-"]{width: 100%}

    // Loop to create the .kl-tb-* class
    @for $i from 1 through $val {
      .base--#{$val} .kl-tb-#{$i}, .row.base--#{$val} .kl-tb-#{$i} {
        width: ((100 / $val) * $i) * 1%;
      }
    }
  }
}
@media (min-width: $screen-phone-max) and (max-width: $screen-tablet-max) {
  //helper (when a .kl-* goes under another due to the float)
  .clear-left-tb{
    clear:left;
  }
}



//--* Mobile *--//
@media (max-width: $screen-phone-max) {
  //body{background:yellow}
  @each $val in $cols{
    // Set all to 100% if not overrided from a class from the loop below
    .base--#{$val} [class^="kl-"], .row.base--#{$val} [class^="kl-"]{width: 100%}

    // Loop to create the .kl-ph-* class
    @for $i from 1 through $val {
      .base--#{$val} .kl-ph-#{$i}, .row.base--#{$val} .kl-ph-#{$i} {
        width: ((100 / $val) * $i) * 1%;
      }
    }
  }
  //helper (when a .kl-* goes under another due to the float)
  .clear-left-ph{
    clear:left;
  }
}



// Demo style
$cl-color: #6530B2;
$cl-color-2: #20D08D;

$font-code : Menlo, Monaco, Courier, "Courier new", monospace;
$box-radius: 6px;

.clearfix{
  @include clearfix();
}

p + p,{
  @include rem(margin-top, $gutter);
}

hr{
  border: 0;
  @include rem(border-top-width, 1px);
  border-top-style : solid;
  border-top-color : #f2f2f2;
  background:transparent;
  @include rem(margin-top, 40px);
  @include rem(margin-bottom, 40px);
}
h1{
  font-weight:700;
  font-size:3em;
  @include rem(margin-top, 30px);
  @include rem(margin-bottom, 30px);
  small{
    font-weight: 400;
  }
}
h2{
  color: lighten($body-color, 30%);
  font-weight:normal;
  line-height:1.6em;
}
.demo{
  .cnt{
    background:$cl-color;
    color:white;
    border-radius: 0.125rem;
    padding:0.25rem 0.375rem;
    font-family: $font-code;
    font-size:.75em;
    .base--16 &{
      background:$cl-color-2;
    }
  }
}
/* .container{
  &:hover{
    background:rgba(aquamarine, .3);
  }
  .row{
    &:hover{
      background:rgba(aquamarine, .5);
    }
  }
} */

.box{
  @include rem(padding, 20px);
  background: lighten($body-color, 77%);
  border-radius:$box-radius;
  position:relative;
  box-shadow: inset 0 -1px 0 lighten($body-color, 72%);
}
code{
  color:lighten($body-color, 50%)
}
.classname{
  font-family:$font-code;
  font-size:.7em;
  background: rgba($body-color, .08);
  padding:.05rem .4rem;
  position:absolute;
  top:0;
  right:0;
  border-top-right-radius: $box-radius;
  border-bottom-left-radius: $box-radius;
}


